import os
import sys
import time
import logging
from collections import Counter, defaultdict
from typing import Optional, Tuple, List, Dict

import cv2
import numpy as np
import tkinter as tk
from tkinter import messagebox, BooleanVar
from PIL import Image, ImageTk, ImageDraw, ImageFont

# Matplotlib backend ph·∫£i set TR∆Ø·ªöC khi import pyplot
import matplotlib

matplotlib.use("TkAgg")
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

LOG = logging.getLogger("PastelCameraApp")
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


class PastelCameraApp:
    """·ª®ng d·ª•ng ghi video + nh·∫≠n di·ªán h√†nh vi & h·ªçc sinh (YOLOv8 x2 + K·∫øt h·ª£p + T·ª± l·∫•y t√™n HS + Bi·ªÉu ƒë·ªì)."""

    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("üéÄ Pastel Camera Recorder v4 üéÄ")
        self.root.geometry("1400x900")
        self.root.configure(bg="#f2e9e4")

        # Camera & video
        self.cap: Optional[cv2.VideoCapture] = None
        self.current_cam_index: Optional[int] = None
        self.frame_size = (960, 540)

        # Recording / counting
        self.counting = False
        self.start_time: Optional[float] = None
        self.recorded_time = 0

        # Detection flags & models
        self.detection_enabled = BooleanVar(value=True)
        self.student_detection_enabled = BooleanVar(value=True)
        self.model = None
        self.student_model = None

        # Model paths
        self.model_path = self.resource_path("model.pt") #nhan_dien_hanh_vi
        self.student_model_path = self.resource_path("students.pt") #nhan_dien_hoc_sinh

        # Data structures for counting
        self.behavior_counts: Counter = Counter()
        self.student_behavior_counts: defaultdict = defaultdict(Counter)
        self.last_behavior_per_student: Dict[str, Tuple[str, float]] = {}
        self.detection_cooldown = 1.5
        self.student_names: List[str] = []

        # Font ti·∫øng Vi·ªát
        self.font_path = self.resource_path("arial.ttf")
        self.font_size = 18
        self.pil_font: Optional[ImageFont.FreeTypeFont] = None
        try:
            if os.path.exists(self.font_path):
                self.pil_font = ImageFont.truetype(self.font_path, self.font_size)
                LOG.info("ƒê√£ t·∫£i font: %s", self.font_path)
            else:
                LOG.warning("Kh√¥ng t√¨m th·∫•y font %s. S·∫Ω d√πng CV2 (sai d·∫•u).", self.font_path)
        except Exception as e:
            LOG.warning("L·ªói t·∫£i font %s: %s. S·∫Ω d√πng CV2 (sai d·∫•u).", self.font_path, e)

        self._check_dependencies_and_load_models()
        self._build_ui()
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.update_camera()

    @staticmethod
    def resource_path(relative_path: str) -> str:
        try:
            base_path = sys._MEIPASS  # PyInstaller
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)

    def _check_dependencies_and_load_models(self):
        self.ultralytics_available = self._is_module_available("ultralytics")
        if not self.ultralytics_available:
            messagebox.showerror("L·ªói Thi·∫øu Th∆∞ Vi·ªán", "C·∫ßn c√†i ƒë·∫∑t ultralytics: pip install ultralytics")
            self.detection_enabled.set(False)
            self.student_detection_enabled.set(False)
            self.root.quit()
            return

        models_loaded = True
        if self.detection_enabled.get() and not self.load_model():
            self.detection_enabled.set(False)
            models_loaded = False
        if self.student_detection_enabled.get() and not self.load_student_model():
            self.student_detection_enabled.set(False)
            models_loaded = False

        if not models_loaded:
            messagebox.showwarning("C·∫£nh B√°o", "M·ªôt ho·∫∑c c·∫£ hai model kh√¥ng t·∫£i ƒë∆∞·ª£c.")

    @staticmethod
    def _is_module_available(mod_name: str) -> bool:
        try:
            __import__(mod_name)
            return True
        except Exception:
            return False

    def _load_yolo_model(self, path: str, model_type: str) -> Optional[object]:
        if not os.path.exists(path):
            LOG.error("Model %s kh√¥ng t·ªìn t·∫°i: %s", model_type, path)
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file model {model_type}")
            return None
        if not self.ultralytics_available:
            LOG.error("Thi·∫øu ultralytics")
            return None

        loading = None
        model = None
        try:
            loading = tk.Toplevel(self.root)
            loading.title(f"T·∫£i model {model_type}")
            loading.geometry("320x100")
            loading.transient(self.root)
            tk.Label(loading, text=f"ƒêang t·∫£i model {model_type}...", font=("Arial", 11)).pack(pady=20)
            loading.update()

            from ultralytics import YOLO

            model = YOLO(path)
            LOG.info("ƒê√£ t·∫£i model %s t·ª´ %s", model_type, path)
        except Exception as e:
            LOG.exception("L·ªói t·∫£i model %s: %s", model_type, e)
            messagebox.showerror("L·ªói", f"Kh√¥ng t·∫£i ƒë∆∞·ª£c model {model_type}: {e}")
            model = None
        finally:
            if loading:
                loading.destroy()
        return model

    def load_model(self) -> bool:
        self.model = self._load_yolo_model(self.model_path, "h√†nh vi")
        return self.model is not None

    def load_student_model(self) -> bool:
        model_temp = self._load_yolo_model(self.student_model_path, "h·ªçc sinh")
        if model_temp:
            if hasattr(model_temp, "names") and isinstance(model_temp.names, dict):
                n = len(model_temp.names)
                if all(i in model_temp.names for i in range(n)):
                    self.student_names = [model_temp.names[i] for i in range(n)]
                    self.student_model = model_temp
                    LOG.info("ƒê√£ t·∫£i student model (%d l·ªõp) v√† l·∫•y t√™n t·ª´ model.", n)
                    return True
                messagebox.showerror("L·ªói Model", "ID l·ªõp model h·ªçc sinh kh√¥ng li√™n t·ª•c (kh√¥ng ph·∫£i 0..n-1).")
            else:
                messagebox.showerror("L·ªói Model", "Model h·ªçc sinh kh√¥ng c√≥ thu·ªôc t√≠nh names (dict).")
        self.student_model = None
        return False

    def draw_text_pil(
        self, img: np.ndarray, text: str, pos: Tuple[int, int], color_rgb: Tuple[int, int, int]
    ) -> np.ndarray:
        if self.pil_font:
            try:
                img_pil = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
                draw = ImageDraw.Draw(img_pil)
                draw.text(pos, text, font=self.pil_font, fill=color_rgb)
                return cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)
            except Exception as e:
                LOG.warning("L·ªói v·∫Ω PIL text: %s", e)

        # Fallback OpenCV (sai d·∫•u ti·∫øng Vi·ªát)
        cv2_color_bgr = (color_rgb[2], color_rgb[1], color_rgb[0])
        cv2.putText(
            img, text, (pos[0], pos[1] + self.font_size), cv2.FONT_HERSHEY_SIMPLEX, 0.6, cv2_color_bgr, 1, cv2.LINE_AA
        )
        return img

    def _build_ui(self):
        # Select frame
        self.select_frame = tk.Frame(self.root, bg="#f2e9e4")
        self.select_frame.pack(fill="both", expand=True)

        tk.Label(self.select_frame, text="Ch·ªçn ngu·ªìn camera", bg="#f2e9e4", font=("Arial", 18, "bold")).pack(
            pady=(30, 10)
        )

        top_frame = tk.Frame(self.select_frame, bg="#f2e9e4")
        top_frame.pack(pady=(15, 5))
        tk.Label(top_frame, text="Ngu·ªìn camera:", bg="#f2e9e4", font=("Arial", 12, "bold")).grid(
            row=0, column=0, padx=(0, 10)
        )

        self.cam_var = tk.StringVar(value="0")
        tk.Radiobutton(top_frame, text="Camera m√°y t√≠nh (0)", variable=self.cam_var, value="0", bg="#f2e9e4",
                       font=("Arial", 11)).grid(row=0, column=1, padx=10)
        tk.Radiobutton(top_frame, text="Camera r·ªùi (1)", variable=self.cam_var, value="1", bg="#f2e9e4",
                       font=("Arial", 11)).grid(row=0, column=2, padx=10)

        tk.Button(
            self.select_frame,
            text="√Åp d·ª•ng ngu·ªìn",
            command=self.apply_camera_choice_and_go,
            bg="#ffffff",
            activebackground="#fde2e4",
            relief="raised",
            bd=2,
            font=("Arial", 12, "bold"),
            cursor="hand2",
        ).pack(pady=20)

        # Main frame
        self.main_frame = tk.Frame(self.root, bg="#f2e9e4")

        top_bar = tk.Frame(self.main_frame, bg="#f2e9e4")
        top_bar.pack(pady=(10, 0), fill="x")

        self.back_btn = tk.Button(
            top_bar,
            text="‚üµ Quay l·∫°i ch·ªçn ngu·ªìn",
            command=self.go_back_to_select,
            bg="#ffffff",
            activebackground="#fde2e4",
            relief="raised",
            bd=2,
            font=("Arial", 11, "bold"),
            cursor="hand2",
        )
        self.back_btn.pack(side="left", padx=20)

        self.student_detection_cb = tk.Checkbutton(
            top_bar,
            text="Nh·∫≠n di·ªán h·ªçc sinh",
            variable=self.student_detection_enabled,
            bg="#f2e9e4",
            font=("Arial", 11, "bold"),
            command=self.toggle_student_detection,
        )
        self.student_detection_cb.pack(side="right", padx=10)
        if self.student_detection_enabled.get():
            self.student_detection_cb.select()

        self.detection_cb = tk.Checkbutton(
            top_bar,
            text="Nh·∫≠n di·ªán h√†nh vi",
            variable=self.detection_enabled,
            bg="#f2e9e4",
            font=("Arial", 11, "bold"),
            command=self.toggle_detection,
        )
        self.detection_cb.pack(side="right", padx=10)
        if self.detection_enabled.get():
            self.detection_cb.select()

        btn_frame = tk.Frame(self.main_frame, bg="#f2e9e4")
        btn_frame.pack(pady=12, fill="x")

        btn_style = {
            "width": 14,
            "height": 3,
            "compound": "top",
            "bg": "#fff",
            "activebackground": "#fde2e4",
            "relief": "raised",
            "bd": 2,
            "font": ("Arial", 11, "bold"),
            "cursor": "hand2",
        }

        start_icon = self._safe_load_icon("start.png", (64, 64))
        stop_icon = self._safe_load_icon("stop.png", (64, 64))
        report_icon = self._safe_load_icon("report.png", (64, 64))

        self.start_btn = tk.Button(btn_frame, text="B·∫Øt ƒë·∫ßu", image=start_icon, command=self.start_counting, **btn_style)
        self.start_btn.image = start_icon
        self.start_btn.pack(side="left", padx=40)

        self.stop_btn = tk.Button(btn_frame, text="D·ª´ng", image=stop_icon, command=self.stop_counting, **btn_style)
        self.stop_btn.image = stop_icon
        self.stop_btn.pack(side="left", padx=40)

        self.report_btn = tk.Button(
            btn_frame, text="B√°o c√°o", image=report_icon, command=self.show_behavior_report, **btn_style
        )
        self.report_btn.image = report_icon
        self.report_btn.pack(side="left", padx=40)

        self.video_label = tk.Label(self.main_frame, bg="#c9ada7")
        self.video_label.pack(pady=10, fill="both", expand=True)

        self.count_frame = tk.Frame(self.main_frame, bg="#f2e9e4")
        self.count_frame.pack(pady=5, fill="x")

        self.count_label = tk.Label(
            self.count_frame,
            text="ƒêang ch·ªù b·∫Øt ƒë·∫ßu ƒë·∫øm...",
            justify=tk.LEFT,
            bg="#f2e9e4",
            font=("Arial", 12),
            fg="#2d3436",
        )
        self.count_label.pack(pady=5)

        self.info_label = tk.Label(
            self.main_frame,
            text="üü° Ch∆∞a m·ªü camera.",
            bg="#f2e9e4",
            font=("Arial", 14, "bold"),
            fg="#2d3436",
        )
        self.info_label.pack(pady=8)

    def _safe_load_icon(self, filename: str, size: Tuple[int, int]) -> Optional[ImageTk.PhotoImage]:
        try:
            path = self.resource_path(filename)
            if not os.path.exists(path):
                return None
            resample = Image.Resampling.LANCZOS if hasattr(Image, "Resampling") else Image.LANCZOS
            img = Image.open(path).resize(size, resample)
            return ImageTk.PhotoImage(img)
        except Exception as e:
            LOG.warning("Kh√¥ng t·∫£i ƒë∆∞·ª£c icon %s: %s", filename, e)
            return None

    def _iou(self, boxA, boxB) -> float:
        xA = max(boxA[0], boxB[0])
        yA = max(boxA[1], boxB[1])
        xB = min(boxA[2], boxB[2])
        yB = min(boxA[3], boxB[3])
        interArea = max(0, xB - xA) * max(0, yB - yA)
        boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])
        boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])
        denom = float(boxAArea + boxBArea - interArea)
        return interArea / denom if denom > 0 else 0.0

    def _associate_detections_iou(self, behavior_results, student_results, iou_threshold=0.3):
        associations: List[Tuple[str, str, float, List[int]]] = []
        behaviors: List[List[object]] = []
        students: List[List[object]] = []

        # H√†nh vi
        if behavior_results and hasattr(behavior_results[0], "boxes"):
            b_names_map = behavior_results[0].names
            for box in behavior_results[0].boxes:
                coords = box.xyxy[0].cpu().numpy().astype(int).tolist()
                conf = float(box.conf[0])
                cls_id = int(box.cls[0])
                if cls_id in b_names_map:
                    behaviors.append([b_names_map[cls_id], conf, coords, -1])

        # H·ªçc sinh
        if student_results and hasattr(student_results[0], "boxes") and self.student_names:
            s_names_map = self.student_names
            student_conf_threshold = 0.5
            for box in student_results[0].boxes:
                conf = float(box.conf[0])
                if conf > student_conf_threshold:
                    coords = box.xyxy[0].cpu().numpy().astype(int).tolist()
                    cls_id = int(box.cls[0])
                    if 0 <= cls_id < len(s_names_map):
                        students.append([s_names_map[cls_id], coords])
                    else:
                        LOG.warning("ID l·ªõp HS kh√¥ng h·ª£p l·ªá: %s", cls_id)

        # Gh√©p IoU
        if not students:
            for b_name, b_conf, b_box, _ in behaviors:
                associations.append(("Unknown", b_name, b_conf, b_box))
            return associations

        iou_matrix = np.zeros((len(behaviors), len(students)))
        for i in range(len(behaviors)):
            for j in range(len(students)):
                iou_matrix[i, j] = self._iou(behaviors[i][2], students[j][1])

        for i in range(len(behaviors)):
            best_iou = 0.0
            best_student_idx = -1
            for j in range(len(students)):
                if iou_matrix[i, j] > best_iou and iou_matrix[i, j] >= iou_threshold:
                    best_iou = iou_matrix[i, j]
                    best_student_idx = j
            student_name = students[best_student_idx][0] if best_student_idx != -1 else "Unknown"
            associations.append((student_name, behaviors[i][0], behaviors[i][1], behaviors[i][2]))
        return associations

    def detect_objects_and_count(self, frame: np.ndarray) -> np.ndarray:
        annotated_frame = frame.copy()
        now = time.time()

        behavior_results = None
        student_results = None
        b_conf_threshold = 0.3
        s_conf_threshold = 0.5

        if self.model and self.detection_enabled.get():
            try:
                behavior_results = self.model(frame, conf=b_conf_threshold, verbose=False)
            except Exception as e:
                LOG.error("L·ªói model h√†nh vi: %s", e)

        if self.student_model and self.student_detection_enabled.get() and self.student_names:
            try:
                student_results = self.student_model(frame, conf=s_conf_threshold, verbose=False)
            except Exception as e:
                LOG.error("L·ªói model h·ªçc sinh: %s", e)

        associations = self._associate_detections_iou(behavior_results, student_results, iou_threshold=0.3)

        processed_students_this_frame = set()
        for student_name, behavior_name, behavior_conf, behavior_box in associations:
            x1, y1, x2, y2 = behavior_box
            if student_name != "Unknown":
                color_bgr = (0, 255, 0)
                color_rgb = (0, 255, 0)
            else:
                color_bgr = (0, 255, 255)
                color_rgb = (255, 255, 0)

            cv2.rectangle(annotated_frame, (x1, y1), (x2, y2), color_bgr, 2)

            label_text = f"{student_name}: {behavior_name} ({behavior_conf:.2f})"
            text_y = y1 - self.font_size - 5 if y1 - self.font_size - 5 > 0 else y1 + 5
            annotated_frame = self.draw_text_pil(annotated_frame, label_text, (x1, text_y), color_rgb)

            if self.counting and student_name != "Unknown":
                last_behavior, last_time = self.last_behavior_per_student.get(student_name, (None, 0.0))
                if (now - last_time > self.detection_cooldown) and (behavior_name != last_behavior):
                    if student_name not in processed_students_this_frame:
                        self.behavior_counts[behavior_name] += 1
                        self.student_behavior_counts[student_name][behavior_name] += 1
                        self.last_behavior_per_student[student_name] = (behavior_name, now)
                        processed_students_this_frame.add(student_name)

        if self.counting and processed_students_this_frame:
            self.update_count_display()

        return annotated_frame

    def toggle_detection(self):
        if self.detection_enabled.get():
            if not self.ultralytics_available:
                self.detection_enabled.set(False)
                messagebox.showerror("L·ªói", "Thi·∫øu ultralytics")
                return
            if self.model is None and not self.load_model():
                self.detection_enabled.set(False)
                return
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ b·∫≠t nh·∫≠n di·ªán h√†nh vi.")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ t·∫Øt nh·∫≠n di·ªán h√†nh vi.")

    def toggle_student_detection(self):
        if self.student_detection_enabled.get():
            if not self.ultralytics_available:
                self.student_detection_enabled.set(False)
                messagebox.showerror("L·ªói", "Thi·∫øu ultralytics")
                return
            if self.student_model is None and not self.load_student_model():
                self.student_detection_enabled.set(False)
                return
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ b·∫≠t nh·∫≠n di·ªán h·ªçc sinh.")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ t·∫Øt nh·∫≠n di·ªán h·ªçc sinh.")

    def start_counting(self):
        if not (self.cap and self.cap.isOpened()):
            messagebox.showerror("L·ªói", "Ch∆∞a c√≥ camera.")
            return
        if not self.detection_enabled.get() and not self.student_detection_enabled.get():
            messagebox.showerror("L·ªói", "B·∫≠t √≠t nh·∫•t m·ªôt nh·∫≠n di·ªán.")
            return
        if self.counting:
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëang ƒë·∫øm.")
            return

        self.behavior_counts = Counter()
        self.student_behavior_counts = defaultdict(Counter)
        self.last_behavior_per_student = {}
        self.counting = True
        self.start_time = time.time()
        self.recorded_time = 0

        status = f"üî¥ ƒêang ƒë·∫øm... (camera {self.current_cam_index})"
        self.count_label.config(text="B·∫Øt ƒë·∫ßu ƒë·∫øm...")
        messagebox.showinfo("Th√¥ng b√°o", "B·∫Øt ƒë·∫ßu ƒë·∫øm!")
        self.info_label.config(text=status)

    def stop_counting(self):
        if not self.counting:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a b·∫Øt ƒë·∫ßu ƒë·∫øm.")
            return

        self.counting = False
        self.recorded_time = int(time.time() - self.start_time) if self.start_time else 0
        status = f"üü° ƒê√£ d·ª´ng ƒë·∫øm. Th·ªùi gian: {self.recorded_time} gi√¢y (camera {self.current_cam_index})"
        self.info_label.config(text=status)
        self.last_behavior_per_student = {}
        self.count_label.config(text="ƒê√£ d·ª´ng ƒë·∫øm. Xem b√°o c√°o.")

        self.show_behavior_report()
        self.save_behavior_report()

    def update_count_display(self):
        if not self.counting:
            return

        lines = ["ƒêang ƒë·∫øm..."]

        if self.student_behavior_counts:
            lines.append("--- Theo H·ªçc Sinh (G·∫ßn ƒë√¢y) ---")
            recent = sorted(self.last_behavior_per_student.items(), key=lambda i: i[1][1], reverse=True)[:5]
            if recent:
                for name, (beh, _) in recent:
                    counts = self.student_behavior_counts.get(name)
                    if counts:
                        total = sum(counts.values())
                        lines.append(f"{name}: {beh} (T·ªïng: {total})")
            else:
                lines.append("(Ch∆∞a ghi nh·∫≠n HS)")

        if self.behavior_counts:
            lines.append("--- T·ªïng H√†nh Vi ---")
            for b, c in sorted(self.behavior_counts.items()):
                lines.append(f"- {b}: {c}")
        elif not self.student_behavior_counts:
            lines.append("(Ch∆∞a ghi nh·∫≠n h√†nh vi)")

        self.count_label.config(text="\n".join(lines))

    def save_behavior_report(self):
        os.makedirs("reports", exist_ok=True)
        fname = time.strftime("reports/behavior_report_%Y%m%d_%H%M%S.txt")
        try:
            with open(fname, "w", encoding="utf-8") as f:
                f.write(f"B√ÅO C√ÅO H√ÄNH VI - {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"T.gian ƒë·∫øm: {self.recorded_time}s\n")
                f.write(f"Camera: {self.current_cam_index}\n\n")

                if self.student_behavior_counts:
                    f.write("THEO H·ªåC SINH:\n=====================\n\n")
                    for student in sorted(self.student_behavior_counts.keys()):
                        behaviors = self.student_behavior_counts[student]
                        f.write(f"H·ªçc sinh: {student}\n")
                        if behaviors:
                            for b, c in sorted(behaviors.items()):
                                f.write(f"   - {b}: {c} l·∫ßn\n")
                        else:
                            f.write("   Kh√¥ng ph√°t hi·ªán.\n")
                        f.write("\n")
                    f.write("\nT·ªîNG H·ª¢P (ƒê√É NH·∫¨N DI·ªÜN HS):\n=====================\n\n")
                else:
                    f.write("T·ªîNG H·ª¢P:\n=====================\n\n")

                if self.behavior_counts:
                    for b, c in sorted(self.behavior_counts.items()):
                        f.write(f"- {b}: {c} l·∫ßn\n")
                else:
                    f.write("Kh√¥ng ph√°t hi·ªán.\n")

            messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ l∆∞u b√°o c√°o: {fname}")
        except Exception as e:
            LOG.exception("L·ªói save report: %s", e)
            messagebox.showerror("L·ªói", f"Kh√¥ng l∆∞u ƒë∆∞·ª£c b√°o c√°o: {e}")

    # ====== V·∫Ω bi·ªÉu ƒë·ªì tr√™n c·ª≠a s·ªï b√°o c√°o ======
    def _create_behavior_chart(self, parent_frame):
        """T·∫°o v√† nh√∫ng bi·ªÉu ƒë·ªì t·∫ßn su·∫•t h√†nh vi v√†o frame."""
        try:
            if not self.behavior_counts:
                tk.Label(parent_frame, text="Kh√¥ng c√≥ d·ªØ li·ªáu h√†nh vi ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.", bg="#f2e9e4").pack(pady=10)
                return None

            labels = list(self.behavior_counts.keys())
            values = list(self.behavior_counts.values())

            fig, ax = plt.subplots(figsize=(7, 4), dpi=100)
            fig.patch.set_facecolor("#f2e9e4")
            ax.set_facecolor("#ffffff")

            bars = ax.bar(labels, values)

            ax.set_xlabel("H√†nh vi", fontweight="bold")
            ax.set_ylabel("S·ªë l·∫ßn xu·∫•t hi·ªán", fontweight="bold")
            ax.set_title("Th·ªëng k√™ t·∫ßn su·∫•t h√†nh vi", fontweight="bold")
            plt.setp(ax.get_xticklabels(), rotation=15, ha="right", rotation_mode="anchor")

            ax.bar_label(bars, padding=3)
            fig.tight_layout()

            canvas = FigureCanvasTkAgg(fig, master=parent_frame)
            canvas_widget = canvas.get_tk_widget()
            canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
            canvas.draw()
            return canvas
        except Exception as e:
            LOG.exception("L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: %s", e)
            tk.Label(parent_frame, text=f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì:\n{e}", fg="red", bg="#f2e9e4").pack(pady=10)
            return None

    def show_behavior_report(self):
        """Hi·ªÉn th·ªã b√°o c√°o (text + bi·ªÉu ƒë·ªì) trong c·ª≠a s·ªï m·ªõi."""
        report_window = tk.Toplevel(self.root)
        report_window.title("üìä B√°o c√°o h√†nh vi")
        report_window.geometry("800x850")
        report_window.configure(bg="#f2e9e4")

        chart_frame = tk.Frame(report_window, bg="#f2e9e4", height=350)
        chart_frame.pack(side=tk.TOP, fill=tk.X, padx=20, pady=(20, 10))
        chart_frame.pack_propagate(False)

        text_frame = tk.Frame(report_window, bg="#f2e9e4")
        text_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True, padx=20, pady=(0, 10))

        # V·∫Ω chart
        self.report_chart_canvas = self._create_behavior_chart(chart_frame)

        # Text report
        scrollbar = tk.Scrollbar(text_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        text_widget = tk.Text(text_frame, wrap="word", font=("Arial", 11), bg="#ffffff")
        text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=text_widget.yview)
        text_widget.config(yscrollcommand=scrollbar.set)

        report = ["B√ÅO C√ÅO CHI TI·∫æT\n", f"Th·ªùi gian ƒë·∫øm: {self.recorded_time} gi√¢y\n"]
        if self.student_behavior_counts:
            report.append("\nTHEO H·ªåC SINH:\n=====================\n")
            for student in sorted(self.student_behavior_counts.keys()):
                behaviors = self.student_behavior_counts[student]
                report.append(f"H·ªçc sinh: {student}\n")
                if behaviors:
                    for b, c in sorted(behaviors.items()):
                        report.append(f"   - {b}: {c} l·∫ßn\n")
                else:
                    report.append("   Kh√¥ng ph√°t hi·ªán.\n")
                report.append("\n")
            report.append("\nT·ªîNG H·ª¢P (ƒê√É NH·∫¨N DI·ªÜN HS):\n=====================\n")
        else:
            report.append("\nT·ªîNG H·ª¢P:\n=====================\n")

        if self.behavior_counts:
            for b, c in sorted(self.behavior_counts.items()):
                report.append(f"- {b}: {c} l·∫ßn\n")
        else:
            report.append("Kh√¥ng ph√°t hi·ªán h√†nh vi n√†o.")

        text_widget.insert("1.0", "".join(report))
        text_widget.config(state="disabled")

        # Buttons
        button_frame = tk.Frame(report_window, bg="#f2e9e4")
        button_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 15))

        tk.Button(
            button_frame,
            text="L∆∞u b√°o c√°o Text",
            command=self.save_behavior_report,
            bg="#ffffff",
            activebackground="#fde2e4",
            relief="raised",
            bd=2,
            font=("Arial", 11, "bold"),
            cursor="hand2",
        ).pack(side=tk.LEFT, padx=20)

        try:
            import pandas  # noqa: F401

            tk.Button(
                button_frame,
                text="Xu·∫•t Excel",
                command=self.export_excel_report,
                bg="#ffffff",
                activebackground="#d0f0c0",
                relief="raised",
                bd=2,
                font=("Arial", 11, "bold"),
                cursor="hand2",
            ).pack(side=tk.LEFT, padx=20)
        except ImportError:
            pass
        except Exception:
            pass

        # (Tu·ª≥ ch·ªçn) ƒë√≥ng figure khi ƒë√≥ng c·ª≠a s·ªï ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
        def on_report_close():
            try:
                if getattr(self, "report_chart_canvas", None):
                    plt.close(self.report_chart_canvas.figure)
            except Exception:
                pass
            report_window.destroy()

        report_window.protocol("WM_DELETE_WINDOW", on_report_close)

    def export_excel_report(self):
        try:
            import pandas as pd  # noqa
            import openpyxl  # noqa

            os.makedirs("reports", exist_ok=True)
            excel_file = time.strftime("reports/behavior_report_%Y%m%d_%H%M%S.xlsx")

            summary_data = [{"H√†nh vi": b, "S·ªë l·∫ßn xu·∫•t hi·ªán": c} for b, c in sorted(self.behavior_counts.items())]
            summary_df = pd.DataFrame(summary_data)

            student_rows: List[Dict[str, object]] = []
            if self.student_behavior_counts:
                for student in sorted(self.student_behavior_counts.keys()):
                    behaviors = self.student_behavior_counts[student]
                    if behaviors:
                        for b, c in sorted(behaviors.items()):
                            student_rows.append({"H·ªçc sinh": student, "H√†nh vi": b, "S·ªë l·∫ßn xu·∫•t hi·ªán": c})
            student_df = pd.DataFrame(student_rows)

            with pd.ExcelWriter(excel_file, engine="openpyxl") as writer:
                summary_df.to_excel(writer, sheet_name="T·ªïng h·ª£p (All)", index=False)
                if not student_df.empty:
                    student_df.to_excel(writer, sheet_name="Theo h·ªçc sinh (Known)", index=False)

            messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ xu·∫•t Excel: {excel_file}")
        except ImportError:
            messagebox.showerror("L·ªói", "C·∫ßn pandas v√† openpyxl: pip install pandas openpyxl")
        except Exception as e:
            LOG.exception("L·ªói export excel: %s", e)
            messagebox.showerror("L·ªói", f"Kh√¥ng xu·∫•t ƒë∆∞·ª£c Excel: {e}")

    def apply_camera_choice_and_go(self):
        if self.counting:
            messagebox.showwarning("ƒêang ƒë·∫øm", "Vui l√≤ng d·ª´ng ƒë·∫øm tr∆∞·ªõc.")
            return

        cam_index = int(self.cam_var.get())
        if not self.init_camera(cam_index):
            alt = 1 - cam_index
            if self.init_camera(alt):
                self.cam_var.set(str(alt))
                messagebox.showwarning("Ch√∫ √Ω", f"Kh√¥ng m·ªü ƒë∆∞·ª£c camera {cam_index}. ƒê√£ th·ª≠ chuy·ªÉn sang {alt}.")
            else:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü camera {cam_index} v√† {alt}.")
                return

        self.show_main_ui()

        status = f"üü¢ Camera {self.current_cam_index} ƒëang b·∫≠t"
        parts = []
        if self.student_detection_enabled.get() and self.student_model:
            parts.append("Nh·∫≠n di·ªán h·ªçc sinh")
        if self.detection_enabled.get() and self.model:
            parts.append("Nh·∫≠n di·ªán h√†nh vi")
        status += f" v·ªõi {' v√† '.join(parts)} ƒëang ho·∫°t ƒë·ªông" if parts else " ‚Äì s·∫µn s√†ng ƒë·∫øm."
        self.info_label.config(text=status)

    def init_camera(self, index: int) -> bool:
        try:
            if self.cap and self.cap.isOpened():
                self.cap.release()
            backend = cv2.CAP_DSHOW if sys.platform.startswith("win") else cv2.CAP_ANY
            self.cap = cv2.VideoCapture(index, backend)
            if not self.cap.isOpened():
                LOG.warning("Kh√¥ng m·ªü ƒë∆∞·ª£c camera %s ngay.", index)
                self.current_cam_index = None
                return False
            self.current_cam_index = index
            LOG.info("M·ªü camera %s th√†nh c√¥ng", index)
            return True
        except Exception as e:
            LOG.exception("L·ªói init_camera: %s", e)
            return False

    def go_back_to_select(self):
        if self.counting:
            messagebox.showwarning("ƒêang ƒë·∫øm", "H√£y d·ª´ng ƒë·∫øm tr∆∞·ªõc.")
            return
        if self.cap and self.cap.isOpened():
            self.cap.release()
        self.main_frame.pack_forget()
        self.select_frame.pack(fill="both", expand=True)
        self.info_label.config(text="üü° Ch∆∞a m·ªü camera.")

    def show_main_ui(self):
        self.select_frame.pack_forget()
        self.main_frame.pack(fill="both", expand=True)

    def update_camera(self):
        try:
            if self.cap and self.cap.isOpened() and self.main_frame.winfo_ismapped():
                ret, frame = self.cap.read()
                if ret and frame is not None:
                    h0, w0 = frame.shape[:2]
                    label_w = self.video_label.winfo_width()
                    label_h = self.video_label.winfo_height()
                    if label_w < 10 or label_h < 10:
                        label_w, label_h = 960, 540
                    scale = min(label_w / w0, label_h / h0) if w0 > 0 and h0 > 0 else 1.0
                    new_w = max(320, int(w0 * scale))
                    new_h = max(240, int(h0 * scale))
                    resized_bgr = cv2.resize(frame, (new_w, new_h), interpolation=cv2.INTER_AREA)

                    try:
                        annotated = self.detect_objects_and_count(resized_bgr)
                    except Exception as e:
                        LOG.exception("L·ªói detect: %s", e)
                        annotated = resized_bgr

                    frame_rgb = cv2.cvtColor(annotated, cv2.COLOR_BGR2RGB)
                    imgtk = ImageTk.PhotoImage(Image.fromarray(frame_rgb))
                    self.video_label.imgtk = imgtk
                    self.video_label.configure(image=imgtk)
                    self.frame_size = (new_w, new_h)

                    status = f"üü¢ Camera {self.current_cam_index} b·∫≠t"
                    if self.counting:
                        status += " (ƒêang ƒë·∫øm...)"
                    else:
                        parts = []
                        if self.student_detection_enabled.get() and self.student_model:
                            parts.append("Nh·∫≠n di·ªán HS: B·∫¨T")
                        if self.detection_enabled.get() and self.model:
                            parts.append("Nh·∫≠n di·ªán HV: B·∫¨T")
                        status += f" ({', '.join(parts)})" if parts else " ‚Äì S·∫µn s√†ng."
                    self.info_label.config(text=status)
                else:
                    self.video_label.configure(image="")
        except Exception as e:
            LOG.exception("L·ªói update_camera: %s", e)
        finally:
            self.root.after(30, self.update_camera)

    def on_close(self):
        if self.counting:
            if not messagebox.askyesno("ƒêang ƒë·∫øm", "D·ª´ng ƒë·∫øm v√† tho√°t?"):
                return
            self.stop_counting()
        try:
            if self.cap and self.cap.isOpened():
                self.cap.release()
        except Exception:
            pass
        try:
            self.root.destroy()
        except tk.TclError:
            pass

    def __del__(self):
        try:
            if self.cap and self.cap.isOpened():
                self.cap.release()
        except Exception:
            pass


if __name__ == "__main__":
    # DPI scaling cho Windows
    if sys.platform == "win32":
        try:
            from ctypes import windll

            windll.shcore.SetProcessDpiAwareness(1)
        except Exception as e:
            LOG.warning("Kh√¥ng th·ªÉ set DPI awareness: %s", e)

    root = tk.Tk()
    app = PastelCameraApp(root)
    root.mainloop()
