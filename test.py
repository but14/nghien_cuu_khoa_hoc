import cv2
import tkinter as tk
from tkinter import messagebox, BooleanVar, filedialog
from PIL import Image, ImageTk
import time, os
import sys
import numpy as np
from collections import Counter

class PastelCameraApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üéÄ Pastel Camera Recorder üéÄ")
        self.root.geometry("1400x900")
        self.root.configure(bg="#f2e9e4")

        self.cap = None
        self.current_cam_index = None
        self.counting = False 
        self.start_time = None
        self.video_writer = None
        self.recorded_time = 0
        self.filename = None
        self.frame_size = (960, 540)  
        
       
        self.detection_enabled = BooleanVar(value=True)
        self.model = None
        self.classes = None
        self.model_path = 'model.pt'
        
        
        self.behavior_counts = Counter()
        self.last_detected = None
        self.last_detected_time = 0
        self.detection_cooldown = 1.0  
        
        
        self.check_dependencies()
        
        
        self.load_model()

        self.select_frame = tk.Frame(self.root, bg="#f2e9e4")
        self.select_frame.pack(fill="both", expand=True)

        title = tk.Label(
            self.select_frame, text="Ch·ªçn ngu·ªìn camera",
            bg="#f2e9e4", font=("Arial", 18, "bold")
        )
        title.pack(pady=(30, 10))

        top_frame = tk.Frame(self.select_frame, bg="#f2e9e4")
        top_frame.pack(pady=(15, 5))

        tk.Label(
            top_frame, text="Ngu·ªìn camera:", bg="#f2e9e4",
            font=("Arial", 12, "bold")
        ).grid(row=0, column=0, padx=(0, 10))

        self.cam_var = tk.StringVar(value="0")
        self.rb_internal = tk.Radiobutton(
            top_frame, text="Camera m√°y t√≠nh (0)",
            variable=self.cam_var, value="0",
            bg="#f2e9e4", font=("Arial", 11),
        )
        self.rb_external = tk.Radiobutton(
            top_frame, text="Camera r·ªùi (1)",
            variable=self.cam_var, value="1",
            bg="#f2e9e4", font=("Arial", 11),
        )
        self.rb_internal.grid(row=0, column=1, padx=10)
        self.rb_external.grid(row=0, column=2, padx=10)

        self.apply_btn = tk.Button(
            self.select_frame, text="√Åp d·ª•ng ngu·ªìn",
            command=self.apply_camera_choice_and_go,
            bg="#ffffff", activebackground="#fde2e4",
            relief="raised", bd=2, font=("Arial", 12, "bold"), cursor="hand2"
        )
        self.apply_btn.pack(pady=20)

    
        self.main_frame = tk.Frame(self.root, bg="#f2e9e4")

        
        top_bar = tk.Frame(self.main_frame, bg="#f2e9e4")
        top_bar.pack(pady=(10, 0), fill="x")

        self.back_btn = tk.Button(
            top_bar, text="‚üµ Quay l·∫°i ch·ªçn ngu·ªìn",
            command=self.go_back_to_select,
            bg="#ffffff", activebackground="#fde2e4",
            relief="raised", bd=2, font=("Arial", 11, "bold"), cursor="hand2"
        )
        self.back_btn.pack(side="left", padx=20)
        
        # Th√™m checkbox ƒë·ªÉ b·∫≠t/t·∫Øt nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng - m·∫∑c ƒë·ªãnh ƒë√£ ch·ªçn
        self.detection_cb = tk.Checkbutton(
            top_bar, text="Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng",
            variable=self.detection_enabled,
            bg="#f2e9e4", font=("Arial", 11, "bold"),
            command=self.toggle_detection
        )
        self.detection_cb.pack(side="right", padx=20)
        self.detection_cb.select()  # ƒê·∫£m b·∫£o checkbox ƒë∆∞·ª£c ch·ªçn

        
        btn_frame = tk.Frame(self.main_frame, bg="#f2e9e4")
        btn_frame.pack(pady=12, fill="x")

        btn_style = {
            "width": 14, "height": 3, "compound": "top",
            "bg": "#fff", "activebackground": "#fde2e4",
            "relief": "raised", "bd": 2, "font": ("Arial", 11, "bold"),
            "cursor": "hand2"
        }

        
        try:
            start_icon = ImageTk.PhotoImage(Image.open("start.png").resize((64, 64)))
            stop_icon = ImageTk.PhotoImage(Image.open("stop.png").resize((64, 64)))
            report_icon = ImageTk.PhotoImage(Image.open("report.png").resize((64, 64)))
        except Exception:
            start_icon = stop_icon = report_icon = None

        def create_hover_button(parent, text, icon, command):
            btn = tk.Button(parent, text=text, image=icon, command=command, **btn_style)
            btn.image = icon
            btn.bind("<Enter>", lambda e: btn.config(bg="#ffe5ec", relief="groove"))
            btn.bind("<Leave>", lambda e: btn.config(bg="#ffffff", relief="raised"))
            return btn

        # ƒê·ªïi t√™n c√°c n√∫t cho ph√π h·ª£p v·ªõi ch·ª©c nƒÉng m·ªõi
        self.start_btn = create_hover_button(btn_frame, "B·∫Øt ƒë·∫ßu", start_icon, self.start_counting)
        self.start_btn.pack(side="left", padx=40)

        self.stop_btn = create_hover_button(btn_frame, "D·ª´ng", stop_icon, self.stop_counting)
        self.stop_btn.pack(side="left", padx=40)

        self.report_btn = create_hover_button(btn_frame, "B√°o c√°o", report_icon, self.show_behavior_report)
        self.report_btn.pack(side="left", padx=40)

        
        self.video_label = tk.Label(self.main_frame, bg="#c9ada7")
        self.video_label.pack(pady=10, fill="both", expand=True)

        # Th√™m khung hi·ªÉn th·ªã s·ªë l∆∞·ª£ng h√†nh vi ƒë√£ ƒë·∫øm ƒë∆∞·ª£c
        self.count_frame = tk.Frame(self.main_frame, bg="#f2e9e4")
        self.count_frame.pack(pady=5, fill="x")
        
        self.count_label = tk.Label(
            self.count_frame,
            text="ƒêang ch·ªù b·∫Øt ƒë·∫ßu ƒë·∫øm...",
            bg="#f2e9e4", font=("Arial", 12), fg="#2d3436"
        )
        self.count_label.pack(pady=5)
        
        self.info_label = tk.Label(
            self.main_frame,
            text="üü° Ch∆∞a m·ªü camera. H√£y quay l·∫°i ch·ªçn ngu·ªìn v√† √°p d·ª•ng.",
            bg="#f2e9e4", font=("Arial", 14, "bold"), fg="#2d3436"
        )
        self.info_label.pack(pady=8)

        
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

        
        self.update_camera()
    
    def check_dependencies(self):
        """Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt"""
        try:
            import torch
            self.torch_available = True
        except ImportError:
            self.torch_available = False
            
        try:
            from ultralytics import YOLO
            self.ultralytics_available = True
        except ImportError:
            self.ultralytics_available = False
            
        if not self.torch_available or not self.ultralytics_available:
            messagebox.showwarning(
                "C·∫£nh b√°o",
                "Thi·∫øu th∆∞ vi·ªán c·∫ßn thi·∫øt cho nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng.\n"
                "Vui l√≤ng c√†i ƒë·∫∑t b·∫±ng l·ªánh:\n\n"
                "pip install torch ultralytics\n\n"
                "B·∫°n v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng ·ª©ng d·ª•ng m√† kh√¥ng c√≥ t√≠nh nƒÉng nh·∫≠n di·ªán."
            )
            # T·∫Øt ch·∫ø ƒë·ªô nh·∫≠n di·ªán n·∫øu thi·∫øu th∆∞ vi·ªán
            self.detection_enabled.set(False)
    
    def load_model(self):
        """T·∫£i m√¥ h√¨nh YOLO t·ª´ file model.pt"""
        if not os.path.exists(self.model_path):
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file m√¥ h√¨nh: {self.model_path}")
            self.detection_enabled.set(False)
            return False
            
        if not self.torch_available or not self.ultralytics_available:
            messagebox.showerror(
                "L·ªói",
                "Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh nh·∫≠n di·ªán. Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt:\n"
                "pip install torch ultralytics"
            )
            self.detection_enabled.set(False)
            return False
            
        try:
            # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
            loading_window = tk.Toplevel(self.root)
            loading_window.title("ƒêang t·∫£i m√¥ h√¨nh")
            loading_window.geometry("300x100")
            loading_window.resizable(False, False)
            loading_window.transient(self.root)
            loading_window.grab_set()
            
            tk.Label(
                loading_window, 
                text="ƒêang t·∫£i m√¥ h√¨nh YOLO...\nVui l√≤ng ƒë·ª£i...",
                font=("Arial", 12)
            ).pack(pady=20)
            
            loading_window.update()
            
            # Th·ª≠ t·∫£i m√¥ h√¨nh b·∫±ng YOLOv8 (ultralytics)
            try:
                from ultralytics import YOLO
                self.model = YOLO(self.model_path)
                print(f"ƒê√£ t·∫£i m√¥ h√¨nh YOLOv8 th√†nh c√¥ng t·ª´ {self.model_path}!")
                loading_window.destroy()
                return True
            except Exception as e:
                print(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh YOLOv8: {e}")
                
                # Th·ª≠ t·∫£i m√¥ h√¨nh b·∫±ng YOLOv5
                try:
                    import torch
                    self.model = torch.hub.load('ultralytics/yolov5', 'custom', path=self.model_path)
                    self.model.conf = 0.45  # Ng∆∞·ª°ng tin c·∫≠y
                    print(f"ƒê√£ t·∫£i m√¥ h√¨nh YOLOv5 th√†nh c√¥ng t·ª´ {self.model_path}!")
                    loading_window.destroy()
                    return True
                except Exception as e2:
                    print(f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh YOLOv5: {e2}")
                    loading_window.destroy()
                    messagebox.showerror(
                        "L·ªói",
                        f"Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh nh·∫≠n di·ªán:\n{str(e2)}\n\n"
                        "Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng m√¥ h√¨nh v√† th∆∞ vi·ªán."
                    )
                    self.detection_enabled.set(False)
                    return False
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
            self.detection_enabled.set(False)
            return False
    
    def toggle_detection(self):
        """B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng"""
        if self.detection_enabled.get():
            if not self.torch_available or not self.ultralytics_available:
                self.detection_enabled.set(False)
                messagebox.showerror(
                    "L·ªói", 
                    "Kh√¥ng th·ªÉ b·∫≠t ch·∫ø ƒë·ªô nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng.\n"
                    "Vui l√≤ng c√†i ƒë·∫∑t th∆∞ vi·ªán c·∫ßn thi·∫øt:\n"
                    "pip install torch ultralytics"
                )
                return
                
            if self.model is None:
                if self.load_model():
                    messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ b·∫≠t ch·∫ø ƒë·ªô nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng")
                else:
                    self.detection_enabled.set(False)
            else:
                messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ b·∫≠t ch·∫ø ƒë·ªô nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ t·∫Øt ch·∫ø ƒë·ªô nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng")

    def detect_objects(self, frame):
        """Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng trong khung h√¨nh v√† ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán"""
        if self.model is None or not self.detection_enabled.get():
            return frame
        
        try:
            # Th·ª±c hi·ªán nh·∫≠n di·ªán
            results = self.model(frame)
            
            # V·∫Ω bounding boxes v√† ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi
            if 'ultralytics.engine.results.Results' in str(type(results)):
                # YOLOv8 - S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c plot() t·ª´ k·∫øt qu·∫£
                annotated_frame = results[0].plot()
                
                # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi n·∫øu ƒëang trong ch·∫ø ƒë·ªô ƒë·∫øm
                if self.counting:
                    current_time = time.time()
                    # L·∫•y c√°c h√†nh vi ƒë∆∞·ª£c ph√°t hi·ªán
                    detected_behaviors = []
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£ v√† l·∫•y t√™n l·ªõp
                    if hasattr(results[0], 'boxes') and len(results[0].boxes) > 0:
                        for box in results[0].boxes:
                            cls_id = int(box.cls[0])
                            if hasattr(results[0], 'names') and cls_id in results[0].names:
                                behavior_name = results[0].names[cls_id]
                                detected_behaviors.append(behavior_name)
                    
                    # N·∫øu c√≥ h√†nh vi ƒë∆∞·ª£c ph√°t hi·ªán v√† ƒë√£ qua th·ªùi gian ch·ªù
                    if detected_behaviors and (current_time - self.last_detected_time > self.detection_cooldown):
                        for behavior in detected_behaviors:
                            if self.last_detected != behavior:  # Ch·ªâ ƒë·∫øm khi h√†nh vi thay ƒë·ªïi
                                self.behavior_counts[behavior] += 1
                                self.last_detected = behavior
                                self.last_detected_time = current_time
                                
                                # C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë l∆∞·ª£ng
                                self.update_count_display()
                
                return annotated_frame
            else:
                # YOLOv5 ho·∫∑c ƒë·ªãnh d·∫°ng kh√°c
                try:
                    # N·∫øu l√† YOLOv5
                    if hasattr(results, 'render'):
                        rendered_frame = results.render()[0]
                        
                        # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi n·∫øu ƒëang trong ch·∫ø ƒë·ªô ƒë·∫øm
                        if self.counting:
                            current_time = time.time()
                            detected_behaviors = []
                            
                            # L·∫•y c√°c h√†nh vi ƒë∆∞·ª£c ph√°t hi·ªán t·ª´ k·∫øt qu·∫£ YOLOv5
                            if hasattr(results, 'names') and hasattr(results, 'pred') and len(results.pred) > 0:
                                for det in results.pred[0]:
                                    if len(det) >= 6:  # Ki·ªÉm tra xem c√≥ ƒë·ªß th√¥ng tin kh√¥ng
                                        cls_id = int(det[5])
                                        if cls_id in results.names:
                                            behavior_name = results.names[cls_id]
                                            detected_behaviors.append(behavior_name)
                            
                            # N·∫øu c√≥ h√†nh vi ƒë∆∞·ª£c ph√°t hi·ªán v√† ƒë√£ qua th·ªùi gian ch·ªù
                            if detected_behaviors and (current_time - self.last_detected_time > self.detection_cooldown):
                                for behavior in detected_behaviors:
                                    if self.last_detected != behavior:  # Ch·ªâ ƒë·∫øm khi h√†nh vi thay ƒë·ªïi
                                        self.behavior_counts[behavior] += 1
                                        self.last_detected = behavior
                                        self.last_detected_time = current_time
                                        
                                        # C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë l∆∞·ª£ng
                                        self.update_count_display()
                        
                        return rendered_frame
                    # N·∫øu l√† list (tr∆∞·ªùng h·ª£p c·ªßa b·∫°n)
                    else:
                        # T·ª± v·∫Ω bounding box
                        img_copy = frame.copy()
                        
                        # Ki·ªÉm tra c·∫•u tr√∫c k·∫øt qu·∫£
                        if isinstance(results, list) and len(results) > 0:
                            # L·∫•y th√¥ng tin t·ª´ k·∫øt qu·∫£
                            detected_behaviors = []
                            
                            for det in results:
                                if hasattr(det, 'boxes') and hasattr(det, 'names'):
                                    # YOLOv8 format
                                    boxes = det.boxes
                                    for box in boxes:
                                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                                        cls = int(box.cls[0])
                                        conf = float(box.conf[0])
                                        label = f"{det.names[cls]} {conf:.2f}"
                                        behavior_name = det.names[cls]
                                        detected_behaviors.append(behavior_name)
                                        
                                        # V·∫Ω bounding box
                                        cv2.rectangle(img_copy, (x1, y1), (x2, y2), (0, 255, 0), 2)
                                        
                                        # V·∫Ω nh√£n
                                        cv2.putText(img_copy, label, (x1, y1 - 10), 
                                                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                            
                            # ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi n·∫øu ƒëang trong ch·∫ø ƒë·ªô ƒë·∫øm
                            if self.counting and detected_behaviors:
                                current_time = time.time()
                                if current_time - self.last_detected_time > self.detection_cooldown:
                                    for behavior in detected_behaviors:
                                        if self.last_detected != behavior:  # Ch·ªâ ƒë·∫øm khi h√†nh vi thay ƒë·ªïi
                                            self.behavior_counts[behavior] += 1
                                            self.last_detected = behavior
                                            self.last_detected_time = current_time
                                            
                                            # C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë l∆∞·ª£ng
                                            self.update_count_display()
                        
                        return img_copy
                except Exception as e:
                    print(f"L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ nh·∫≠n di·ªán: {e}")
                    return frame
        except Exception as e:
            print(f"L·ªói khi nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng: {e}")
            return frame
    
    def update_count_display(self):
        """C·∫≠p nh·∫≠t hi·ªÉn th·ªã s·ªë l∆∞·ª£ng h√†nh vi ƒë√£ ƒë·∫øm ƒë∆∞·ª£c"""
        if not self.counting:
            return
            
        count_text = "S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi:\n"
        if self.behavior_counts:
            for behavior, count in self.behavior_counts.items():
                count_text += f"- {behavior}: {count} l·∫ßn\n"
        else:
            count_text += "Ch∆∞a ph√°t hi·ªán h√†nh vi n√†o."
            
        self.count_label.config(text=count_text)
    
    def show_main_ui(self):
        self.select_frame.pack_forget()
        self.main_frame.pack(fill="both", expand=True)

    def go_back_to_select(self):
        if self.counting:
            messagebox.showwarning("ƒêang ƒë·∫øm", "H√£y d·ª´ng ƒë·∫øm tr∆∞·ªõc khi quay l·∫°i m√†n ch·ªçn ngu·ªìn.")
            return
        self.main_frame.pack_forget()
        self.select_frame.pack(fill="both", expand=True)

    
    def apply_camera_choice_and_go(self):
        if self.counting:
            messagebox.showwarning("ƒêang ƒë·∫øm", "Vui l√≤ng d·ª´ng ƒë·∫øm tr∆∞·ªõc khi ƒë·ªïi ngu·ªìn.")
            return

        cam_index = int(self.cam_var.get())
        if not self.init_camera(cam_index):
            alt = 1 - cam_index
            if self.init_camera(alt):
                self.cam_var.set(str(alt))
                messagebox.showwarning(
                    "Ch√∫ √Ω",
                    f"Kh√¥ng m·ªü ƒë∆∞·ª£c camera {cam_index}. H·ªá th·ªëng ƒë√£ t·ª± chuy·ªÉn sang camera {alt}."
                )
            else:
                messagebox.showerror(
                    "L·ªói",
                    f"Kh√¥ng th·ªÉ m·ªü camera {cam_index} (v√† c≈©ng kh√¥ng m·ªü ƒë∆∞·ª£c {alt})."
                )
                return

    
        self.show_main_ui()
        status = f"üü¢ Camera {self.current_cam_index} ƒëang b·∫≠t"
        if self.detection_enabled.get():
            status += " v·ªõi nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng ƒëang ho·∫°t ƒë·ªông"
        else:
            status += " ‚Äì s·∫µn s√†ng ƒë·∫øm h√†nh vi."
        self.info_label.config(text=status)

    
    def init_camera(self, index: int) -> bool:
    
        try:
            if self.cap and self.cap.isOpened():
                self.cap.release()
        except Exception:
            pass

        
        backend = cv2.CAP_DSHOW if sys.platform.startswith("win") else 0
        self.cap = cv2.VideoCapture(index, backend)

        ok = self.cap.isOpened()
        if ok:
            self.current_cam_index = index
        else:
            self.current_cam_index = None
        return ok

    
    def update_camera(self):
        if self.cap and self.cap.isOpened() and self.main_frame.winfo_ismapped():
            ret, frame = self.cap.read()
            if ret and frame is not None:
                h0, w0 = frame.shape[:2]
                vw = self.video_label.winfo_width()
                vh = self.video_label.winfo_height()
                if vw <= 1 or vh <= 1:
                    vw, vh = self.frame_size

                scale = min(vw / w0, vh / h0)
                new_w = max(320, int(w0 * scale))
                new_h = max(240, int(h0 * scale))

                resized_bgr = cv2.resize(frame, (new_w, new_h))
                
                # Th·ª±c hi·ªán nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng n·∫øu ƒë∆∞·ª£c b·∫≠t
                if self.detection_enabled.get() and self.model is not None:
                    try:
                        resized_bgr = self.detect_objects(resized_bgr)
                    except Exception as e:
                        print(f"L·ªói khi nh·∫≠n di·ªán: {e}")

                frame_rgb = cv2.cvtColor(resized_bgr, cv2.COLOR_BGR2RGB)
                imgtk = ImageTk.PhotoImage(Image.fromarray(frame_rgb))
                self.video_label.imgtk = imgtk
                self.video_label.configure(image=imgtk)
                self.frame_size = (new_w, new_h)

                if self.current_cam_index is not None:
                    status = "üü¢ Camera {} ƒëang b·∫≠t".format(self.current_cam_index)
                    if self.detection_enabled.get():
                        if self.counting:
                            status += " (ƒêang ƒë·∫øm h√†nh vi...)"
                        else:
                            status += " (Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng: B·∫¨T)"
                    else:
                        status += " ‚Äì s·∫µn s√†ng ƒë·∫øm h√†nh vi."
                    self.info_label.config(text=status)
            else:
                self.video_label.configure(image="")
        self.root.after(15, self.update_camera)

    
    def start_counting(self):
        """B·∫Øt ƒë·∫ßu ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi"""
        if not (self.cap and self.cap.isOpened()):
            messagebox.showerror("L·ªói", "Ch∆∞a c√≥ camera n√†o ƒëang m·ªü.")
            return
            
        if not self.detection_enabled.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng b·∫≠t ch·∫ø ƒë·ªô nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng tr∆∞·ªõc khi ƒë·∫øm.")
            return
            
        if not self.counting:
            # Reset c√°c bi·∫øn ƒë·∫øm
            self.behavior_counts = Counter()
            self.last_detected = None
            self.last_detected_time = 0
            
            self.counting = True
            self.start_time = time.time()
            
            status = f"üî¥ ƒêang ƒë·∫øm h√†nh vi (camera {self.current_cam_index})..."
            self.info_label.config(text=status)
            self.count_label.config(text="ƒêang ƒë·∫øm h√†nh vi...\nCh∆∞a ph√°t hi·ªán h√†nh vi n√†o.")
            messagebox.showinfo("Th√¥ng b√°o", "B·∫Øt ƒë·∫ßu ƒë·∫øm h√†nh vi!")

    def stop_counting(self):
        """D·ª´ng ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi"""
        if self.counting:
            self.counting = False
            self.recorded_time = int(time.time() - self.start_time) if self.start_time else 0
            
            status = f"üü° ƒê√£ d·ª´ng ƒë·∫øm. Th·ªùi gian: {self.recorded_time} gi√¢y (camera {self.current_cam_index})"
            self.info_label.config(text=status)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ ƒë·∫øm
            self.show_behavior_report()
            
            # L∆∞u k·∫øt qu·∫£ v√†o file
            self.save_behavior_report()
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a b·∫Øt ƒë·∫ßu ƒë·∫øm h√†nh vi.")

    def save_behavior_report(self):
        """L∆∞u b√°o c√°o h√†nh vi v√†o file"""
        os.makedirs("reports", exist_ok=True)
        report_file = time.strftime("reports/behavior_report_%Y%m%d_%H%M%S.txt")
        
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(f"B√ÅO C√ÅO H√ÄNH VI - {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"Th·ªùi gian ƒë·∫øm: {self.recorded_time} gi√¢y\n")
            f.write(f"Camera: {self.current_cam_index}\n\n")
            f.write("S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi:\n")
            
            if self.behavior_counts:
                for behavior, count in self.behavior_counts.items():
                    f.write(f"- {behavior}: {count} l·∫ßn\n")
            else:
                f.write("Kh√¥ng ph√°t hi·ªán h√†nh vi n√†o trong th·ªùi gian ƒë·∫øm.\n")
        
        print(f"ƒê√£ l∆∞u b√°o c√°o v√†o file: {report_file}")
    
    def show_behavior_report(self):
        """Hi·ªÉn th·ªã b√°o c√°o s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi"""
        report = f"B√ÅO C√ÅO H√ÄNH VI\n\n"
        if hasattr(self, 'recorded_time') and self.recorded_time:
            report += f"Th·ªùi gian ƒë·∫øm: {self.recorded_time} gi√¢y\n\n"
        
        report += "S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c h√†nh vi:\n"
        
        if self.behavior_counts:
            for behavior, count in sorted(self.behavior_counts.items()):
                report += f"- {behavior}: {count} l·∫ßn\n"
        else:
            report += "Kh√¥ng ph√°t hi·ªán h√†nh vi n√†o trong th·ªùi gian ƒë·∫øm."
        
        messagebox.showinfo("üìä B√°o c√°o h√†nh vi", report)

    def on_close(self):
        if self.counting:
            if not messagebox.askyesno("ƒêang ƒë·∫øm", "ƒêang ƒë·∫øm h√†nh vi. Mu·ªën d·ª´ng v√† tho√°t?"):
                return
            self.stop_counting()
        try:
            if hasattr(self, "cap") and self.cap and self.cap.isOpened():
                self.cap.release()
        except Exception:
            pass
        self.root.destroy()

    def __del__(self):
        try:
            if hasattr(self, "cap") and self.cap and self.cap.isOpened():
                self.cap.release()
        except Exception:
            pass

if __name__ == "__main__":
    root = tk.Tk()
    app = PastelCameraApp(root)
    root.mainloop()