import os
import sys
import time
import logging
from collections import Counter, defaultdict
from typing import Optional, Tuple

import cv2
import numpy as np
import tkinter as tk
from tkinter import messagebox, BooleanVar, ttk
from PIL import Image, ImageTk


LOG = logging.getLogger("PastelCameraApp")
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


class PastelCameraApp:
    """·ª®ng d·ª•ng ghi video + nh·∫≠n di·ªán h√†nh vi & h·ªçc sinh (phi√™n b·∫£n n√¢ng c·∫•p)."""

    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("üéÄ Pastel Camera Recorder üéÄ")
        self.root.geometry("1400x900")
        self.root.configure(bg="#f2e9e4")

        # Camera & video
        self.cap: Optional[cv2.VideoCapture] = None
        self.current_cam_index: Optional[int] = None
        self.frame_size = (960, 540)

        # Recording / counting
        self.counting = False
        self.start_time: Optional[float] = None
        self.recorded_time = 0

        # Detection flags & models
        self.detection_enabled = BooleanVar(value=True)
        self.student_detection_enabled = BooleanVar(value=True)

        self.model = None
        self.student_model = None

        # Model paths (c·∫•u h√¨nh theo file ch·∫°y)
        self.model_path = self.resource_path("model.pt")
        self.student_model_path = self.resource_path("face_classifier.pth")

        # Data structures for counting
        self.behavior_counts: Counter = Counter()
        self.student_behavior_counts: defaultdict = defaultdict(Counter)
        self.current_behaviors: dict = {}
        self.current_student: Optional[str] = None

        # Timing / cooldowns
        self.last_detected: Optional[str] = None
        self.last_detected_time = 0.0
        self.detection_cooldown = 1.0

        self.last_student_time = 0.0
        self.student_cooldown = 2.0
        
        # Danh s√°ch t√™n h·ªçc sinh m·∫∑c ƒë·ªãnh
        self.student_names = [f"H·ªçc sinh {i+1}" for i in range(10)]
        
        # T·∫£i c·∫•u h√¨nh
        self.load_config()
        
        # T·∫£i danh s√°ch h·ªçc sinh t·ª´ file (n·∫øu c√≥)
        self.load_student_names()
        
        # Ki·ªÉm tra dependencies v√† t·∫£i m√¥ h√¨nh
        self._check_dependencies_and_load_models()

        # Build UI
        self._build_ui()
        
        # Set up window close handler
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        self.update_camera()

   
    @staticmethod
    def resource_path(relative_path: str) -> str:
        """L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn t√†i nguy√™n (h·ªó tr·ª£ PyInstaller)."""
        try:
            base_path = sys._MEIPASS  # type: ignore
        except Exception:
            base_path = os.path.abspath(".")
        return os.path.join(base_path, relative_path)

    def _check_dependencies_and_load_models(self):
        """Ki·ªÉm tra th∆∞ vi·ªán c·∫ßn thi·∫øt v√† c·ªë g·∫Øng t·∫£i m√¥ h√¨nh (n·∫øu c√≥)."""
        # Ki·ªÉm tra torch + ultralytics (kh√¥ng raise, ch·ªâ c·∫£nh b√°o v√† disable features)
        self.torch_available = self._is_module_available("torch")
        self.ultralytics_available = self._is_module_available("ultralytics")

        if not (self.torch_available and self.ultralytics_available):
            messagebox.showwarning(
                "C·∫£nh b√°o",
                "Thi·∫øu th∆∞ vi·ªán nh·∫≠n di·ªán: torch v√†/ho·∫∑c ultralytics.\n"
                "B·∫°n c√≥ th·ªÉ c√†i:\n\npip install torch ultralytics\n\n"
                "C√°c t√≠nh nƒÉng nh·∫≠n di·ªán s·∫Ω b·ªã t·∫Øt n·∫øu thi·∫øu."
            )
           
            if not self.torch_available:
                self.student_detection_enabled.set(False)
            if not (self.torch_available and self.ultralytics_available):
                self.detection_enabled.set(False)

        
        if self.detection_enabled.get():
            self.load_model()
        if self.student_detection_enabled.get():
            self.load_student_model()

    @staticmethod
    def _is_module_available(mod_name: str) -> bool:
        try:
            __import__(mod_name)
            return True
        except Exception:
            return False

    def load_model(self) -> bool:
        """T·∫£i m√¥ h√¨nh h√†nh vi (YOLOv8 ho·∫∑c fallback YOLOv5) t·ª´ file model_path."""
        if not os.path.exists(self.model_path):
            LOG.warning("Model h√†nh vi kh√¥ng t·ªìn t·∫°i: %s", self.model_path)
            self.detection_enabled.set(False)
            return False

        if not (self.torch_available or self.ultralytics_available):
            LOG.warning("Kh√¥ng c√≥ th∆∞ vi·ªán ƒë·ªÉ load model h√†nh vi.")
            self.detection_enabled.set(False)
            return False

        
        loading = None
        try:
            loading = tk.Toplevel(self.root)
            loading.title("ƒêang t·∫£i m√¥ h√¨nh h√†nh vi")
            loading.geometry("320x100")
            loading.transient(self.root)
            tk.Label(loading, text="ƒêang t·∫£i m√¥ h√¨nh h√†nh vi...\nVui l√≤ng ƒë·ª£i...", font=("Arial", 11)).pack(pady=20)
            loading.update()

           
            if self.ultralytics_available:
                try:
                    from ultralytics import YOLO  # local import
                    self.model = YOLO(self.model_path)
                    LOG.info("ƒê√£ t·∫£i model h√†nh vi (YOLOv8) t·ª´ %s", self.model_path)
                    return True
                except Exception as e:
                    LOG.warning("Kh√¥ng th·ªÉ load YOLOv8: %s", e)

            
            if self.torch_available:
                try:
                    import torch
                    self.model = torch.hub.load("ultralytics/yolov5", "custom", path=self.model_path, verbose=False)
                   
                    try:
                        self.model.conf = 0.45
                    except Exception:
                        pass
                    LOG.info("ƒê√£ t·∫£i model h√†nh vi (YOLOv5) t·ª´ %s", self.model_path)
                    return True
                except Exception as e:
                    LOG.warning("Kh√¥ng th·ªÉ load YOLOv5: %s", e)

            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh h√†nh vi. Ki·ªÉm tra ƒë·ªãnh d·∫°ng v√† th∆∞ vi·ªán.")
            self.detection_enabled.set(False)
            return False
        finally:
            if loading:
                loading.destroy()

    def load_student_model(self) -> bool:
        """T·∫£i m√¥ h√¨nh nh·∫≠n di·ªán h·ªçc sinh (ResNet18) ho·∫∑c YOLO t√πy file."""
        if not os.path.exists(self.student_model_path):
            LOG.info("Kh√¥ng t√¨m th·∫•y student model: %s", self.student_model_path)
            self.student_detection_enabled.set(False)
            return False

        if not self.torch_available:
            LOG.warning("torch kh√¥ng c√≥ - kh√¥ng th·ªÉ load student model.")
            self.student_detection_enabled.set(False)
            return False

        loading = None
        try:
            loading = tk.Toplevel(self.root)
            loading.title("ƒêang t·∫£i m√¥ h√¨nh h·ªçc sinh")
            loading.geometry("320x100")
            loading.transient(self.root)
            tk.Label(loading, text="ƒêang t·∫£i m√¥ h√¨nh h·ªçc sinh...\nVui l√≤ng ƒë·ª£i...", font=("Arial", 11)).pack(pady=20)
            loading.update()

            
            try:
                import torch
                import torchvision.models as models

                
                num_classes = max(10, len(self.student_names))
                model = models.resnet18(pretrained=False)
                model.fc = torch.nn.Linear(model.fc.in_features, num_classes)
                state = torch.load(self.student_model_path, map_location=torch.device("cpu"))
                model.load_state_dict(state)
                model.eval()
                self.student_model = model
                LOG.info("ƒê√£ t·∫£i student model d·∫°ng ResNet t·ª´ %s", self.student_model_path)
                return True
            except Exception as e:
                LOG.warning("Kh√¥ng th·ªÉ load student model d∆∞·ªõi d·∫°ng ResNet: %s", e)

            
            if self.ultralytics_available:
                try:
                    from ultralytics import YOLO
                    self.student_model = YOLO(self.student_model_path)
                    LOG.info("ƒê√£ t·∫£i student model (YOLOv8) t·ª´ %s", self.student_model_path)
                    return True
                except Exception as e:
                    LOG.warning("Kh√¥ng th·ªÉ load student YOLOv8: %s", e)
            if self.torch_available:
                try:
                    import torch
                    self.student_model = torch.hub.load("ultralytics/yolov5", "custom", path=self.student_model_path, verbose=False)
                    LOG.info("ƒê√£ t·∫£i student model (YOLOv5) t·ª´ %s", self.student_model_path)
                    return True
                except Exception as e:
                    LOG.warning("Kh√¥ng th·ªÉ load student YOLOv5: %s", e)

            messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh h·ªçc sinh. T√≠nh nƒÉng nh·∫≠n di·ªán h·ªçc sinh s·∫Ω b·ªã t·∫Øt.")
            self.student_detection_enabled.set(False)
            return False
        finally:
            if loading:
                loading.destroy()